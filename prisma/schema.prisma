generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String      @id @default(uuid()) @db.VarChar(36)
  fullname   String
  email      String      @unique
  password   String
  role       String
  createdAt DateTime    @default(now())
  inventory  Inventory[] @relation("UserInventory")
  suppliers  Suppliers[] @relation("UserSuppliers")
}

model Items {
  id              Int             @id @default(autoincrement())
  itemCode        String          @unique
  zahirCode       String?
  itemDescription String?
  unit            Units
  group           Group
  classification  Classifications
  price           Float?
  stock           Int?
  image           String?
  itemStatus      ItemStatus @default(Active)
  createdBy       String          @db.VarChar(36)
  updatedBy       String          @db.VarChar(36)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Suppliers {
  supplierId   Int         @id @default(autoincrement())
  supplierName String
  address      String?
  phone        String?
  email        String?
  createBy     String      @db.VarChar(36)
  updateBy     String      @db.VarChar(36)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  stock        Inventory[]
  user         Users       @relation("UserSuppliers", fields: [createBy], references: [id])

  @@index([createBy], map: "Suppliers_createBy_fkey")
}

model Inventory {
  id           Int          @id @default(autoincrement())
  date         DateTime?
  idSupplier   Int
  itemCodeId   Int
  price        Float?
  qtyIn       Int?
  qtyOut      Int?
  image        String?
  productionId Int?
  description  String?
  createBy     String       @db.VarChar(36)
  updateBy     String       @db.VarChar(36)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         Users        @relation("UserInventory", fields: [createBy], references: [id])
  suppliers    Suppliers    @relation(fields: [idSupplier], references: [supplierId])
  productions  Productions? @relation(fields: [productionId], references: [id])

  @@index([createBy], map: "Inventory_createBy_fkey")
  @@index([idSupplier], map: "Inventory_idSupplier_fkey")
  @@index([productionId], map: "Inventory_productionId_fkey")
}

model Employees {
  id          Int           @id @default(autoincrement())
  fullName    String
  address     String?
  phone       String?
  position    String?
  shift       Shift
  productions Productions[]
}

model Building {
  id           Int           @id @default(autoincrement())
  machine      String
  buildingName BuildingName
  productions  Productions[]
}

model Productions {
  id         Int         @id @default(autoincrement())
  employeeId Int
  buildingId Int
  inventory  Inventory[]
  building   Building    @relation(fields: [buildingId], references: [id])
  employee   Employees   @relation(fields: [employeeId], references: [id])

  @@index([buildingId], map: "Productions_buildingId_fkey")
  @@index([employeeId], map: "Productions_employeeId_fkey")
}

enum BuildingName {
  A
  B
  C
}

enum Shift {
  A
  B
}

enum Units {
  Pcs
  Kg
}

enum Group {
  Lokal
  Import
  Random
}

enum Classifications {
  Sparepart
  Assets
  Consumable
  Bearing
  Bolt
  Belt
}

enum ItemStatus {
  Active
  InActive
  NotFound
}
